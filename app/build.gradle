repositories {
    maven { url 'https://clojars.org/repo/' }
    maven { url 'https://dl.bintray.com/drummer-aidan/maven' }
}

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.2'

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        applicationId "com.amatkivskiy.gitteroid"
        minSdkVersion 16
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    def gitterApiProperties = getGitterPropertiesOrFail()

    buildTypes {
        debug {
            buildConfigField "String", "OAUTH_KEY", gitterApiProperties['oauth_key']
            buildConfigField "String", "OAUTH_SECRET", gitterApiProperties['oauth_secret']
            buildConfigField "String", "REDIRECT_URL", gitterApiProperties['redirect_url']
            resValue "string", "oauth_scheme", gitterApiProperties['url_scheme']
        }

        release {
            buildConfigField "String", "OAUTH_KEY", gitterApiProperties['oauth_key']
            buildConfigField "String", "OAUTH_SECRET", gitterApiProperties['oauth_secret']
            buildConfigField "String", "REDIRECT_URL", gitterApiProperties['redirect_url']
            resValue "string", "oauth_scheme", gitterApiProperties['url_scheme']

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile project(':data')
    compile project(':domain')

    testCompile 'junit:junit:4.12'

    // * UI libraries
    compile 'com.android.support:appcompat-v7:24.2.1'
//    Material
    compile 'com.github.rey5137:material:1.2.4'
    compile 'com.android.support:design:24.2.1'
    compile 'com.jpardogo.materialtabstrip:library:1.1.1'
    compile 'com.marshalchen.ultimaterecyclerview:library:0.7.0'
    compile 'com.android.support:cardview-v7:24.2.1'
    compile('com.afollestad.material-dialogs:commons:0.9.0.2') {
        transitive = true
    }

    compile 'com.github.d-max:spots-dialog:0.7@aar'
    compile 'com.github.dmytrodanylyk.circular-progress-button:library:1.1.3'
    compile 'com.github.gabrielemariotti.changeloglib:changelog:2.1.0'
//    Iconics fonts
    compile 'com.mikepenz:google-material-typeface:2.2.0.3.original@aar'
    compile 'com.mikepenz:octicons-typeface:3.2.0.2@aar'
    compile 'com.mikepenz:fontawesome-typeface:4.6.0.3@aar'

    compile('com.mikepenz:aboutlibraries:5.8.1@aar') {
        transitive = true
    }
    compile('com.mikepenz:materialdrawer:5.6.0@aar') {
        transitive = true
    }
    compile 'com.github.clans:fab:1.6.4'

//    * Util libraries
    compile 'com.jakewharton:butterknife:8.4.0'
    apt 'com.jakewharton:butterknife-compiler:8.4.0'
    compile 'com.android.support:support-annotations:24.2.1'
    compile 'net.danlew:android.joda:2.9.4.1'

//    fragmentargs
    compile 'com.hannesdorfmann.fragmentargs:annotation:3.0.2'
    apt 'com.hannesdorfmann.fragmentargs:processor:3.0.2'

//    icepick
    apt 'com.google.guava:guava:19.0'
    compile 'frankiesardo:icepick:3.2.0'
    provided 'frankiesardo:icepick-processor:3.2.0'

    compile 'cat.ereza:customactivityoncrash:1.5.0'

//    Intentbuilder
    compile 'se.emilsjolander:intentbuilder-api:0.14.0'
    apt 'se.emilsjolander:intentbuilder-compiler:0.14.0'
    compile 'com.github.bumptech.glide:glide:3.7.0'

//    * Architectural libraries
//    Dagger
    compile 'com.google.dagger:dagger:2.7'
    apt 'com.google.dagger:dagger-compiler:2.7'

//    RxJava
    compile 'io.reactivex:rxandroid:1.2.1'

//    Nucleus
    compile 'info.android15.nucleus:nucleus:4.0.0'
    compile 'info.android15.nucleus:nucleus-support-v7:4.0.0'
    compile 'info.android15.nucleus:nucleus-support-v4:4.0.0'

    compile 'com.github.amatkivskiy:gitter.sdk.rx:1.4'
}

def getGitterPropertiesOrFail() {
    if (!file("gitter_api.properties").exists()) {
        System.err.println("You need to provide 'gitter_api.properties' file with Gitter API config properties:\n" +
                "oauth_key=\"key\"\n" +
                "oauth_secret=\"screet\"\n" +
                "redirect_url=\"url\" + " +
                "url_scheme=\"url_scheme\"")
        throw new IllegalStateException("Provide 'gitter_api.properties' file.")
    }

    def gitterApiProperties = new Properties()
    gitterApiProperties.load(file("gitter_api.properties").newDataInputStream())

    return gitterApiProperties
}
